[{"C:\\Users\\79282\\react-mesto-api-full-gha\\frontend\\src\\index.js":"1","C:\\Users\\79282\\react-mesto-api-full-gha\\frontend\\src\\reportWebVitals.js":"2","C:\\Users\\79282\\react-mesto-api-full-gha\\frontend\\src\\components\\App.js":"3","C:\\Users\\79282\\react-mesto-api-full-gha\\frontend\\src\\components\\ImagePopup.jsx":"4","C:\\Users\\79282\\react-mesto-api-full-gha\\frontend\\src\\components\\InfoTooltip.jsx":"5","C:\\Users\\79282\\react-mesto-api-full-gha\\frontend\\src\\components\\PopupWithForm.jsx":"6","C:\\Users\\79282\\react-mesto-api-full-gha\\frontend\\src\\components\\Header.jsx":"7","C:\\Users\\79282\\react-mesto-api-full-gha\\frontend\\src\\components\\ProtectedRoute.jsx":"8","C:\\Users\\79282\\react-mesto-api-full-gha\\frontend\\src\\components\\Main.jsx":"9","C:\\Users\\79282\\react-mesto-api-full-gha\\frontend\\src\\components\\Login.jsx":"10","C:\\Users\\79282\\react-mesto-api-full-gha\\frontend\\src\\components\\EditProfilePopup.jsx":"11","C:\\Users\\79282\\react-mesto-api-full-gha\\frontend\\src\\components\\Register.jsx":"12","C:\\Users\\79282\\react-mesto-api-full-gha\\frontend\\src\\components\\AddPlacePopup.jsx":"13","C:\\Users\\79282\\react-mesto-api-full-gha\\frontend\\src\\components\\EditAvatarPopup.jsx":"14","C:\\Users\\79282\\react-mesto-api-full-gha\\frontend\\src\\contexts\\CurrentUserContext.js":"15","C:\\Users\\79282\\react-mesto-api-full-gha\\frontend\\src\\utils\\api.js":"16","C:\\Users\\79282\\react-mesto-api-full-gha\\frontend\\src\\utils\\auth.js":"17","C:\\Users\\79282\\react-mesto-api-full-gha\\frontend\\src\\components\\Card.jsx":"18","C:\\Users\\79282\\react-mesto-api-full-gha\\frontend\\src\\components\\Footer.jsx":"19"},{"size":427,"mtime":1701374312209,"results":"20","hashOfConfig":"21"},{"size":362,"mtime":1701374315396,"results":"22","hashOfConfig":"21"},{"size":9522,"mtime":1701521394085,"results":"23","hashOfConfig":"21"},{"size":616,"mtime":1701374474057,"results":"24","hashOfConfig":"21"},{"size":1450,"mtime":1701374475648,"results":"25","hashOfConfig":"21"},{"size":1041,"mtime":1701374480385,"results":"26","hashOfConfig":"21"},{"size":2197,"mtime":1701521411341,"results":"27","hashOfConfig":"21"},{"size":303,"mtime":1701521470054,"results":"28","hashOfConfig":"21"},{"size":1801,"mtime":1701374478793,"results":"29","hashOfConfig":"21"},{"size":1691,"mtime":1701374477213,"results":"30","hashOfConfig":"21"},{"size":2158,"mtime":1701374469312,"results":"31","hashOfConfig":"21"},{"size":2132,"mtime":1701521500742,"results":"32","hashOfConfig":"21"},{"size":1744,"mtime":1701374462937,"results":"33","hashOfConfig":"21"},{"size":1025,"mtime":1701374467716,"results":"34","hashOfConfig":"21"},{"size":119,"mtime":1701374485148,"results":"35","hashOfConfig":"21"},{"size":2999,"mtime":1701521760730,"results":"36","hashOfConfig":"21"},{"size":1477,"mtime":1701521587921,"results":"37","hashOfConfig":"21"},{"size":1705,"mtime":1701374466113,"results":"38","hashOfConfig":"21"},{"size":214,"mtime":1701374470906,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"7nnlvy",{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77"},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90"},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\79282\\react-mesto-api-full-gha\\frontend\\src\\index.js",[],[],"C:\\Users\\79282\\react-mesto-api-full-gha\\frontend\\src\\reportWebVitals.js",[],[],"C:\\Users\\79282\\react-mesto-api-full-gha\\frontend\\src\\components\\App.js",["100"],[],"import React from 'react';\nimport { Routes, Route, useNavigate } from 'react-router-dom';\nimport Header from './Header.jsx';\nimport Main from './Main.jsx';\nimport PopupWithForm from './PopupWithForm.jsx';\nimport ImagePopup from './ImagePopup.jsx';\nimport CurrentUserContext from '../contexts/CurrentUserContext.js';\nimport EditProfilePopup from './EditProfilePopup.jsx';\nimport EditAvatarPopup from './EditAvatarPopup.jsx';\nimport ProtectedRoute from './ProtectedRoute.jsx';\nimport InfoTooltip from './InfoTooltip.jsx';\nimport Login from './Login.jsx';\nimport Register from './Register.jsx';\nimport { api } from '../utils/api.js';\nimport { auth } from '../utils/auth.js';\nimport AddPlacePopup from './AddPlacePopup.jsx';\n\nfunction App() {\n    const [isEditProfilePopupOpen, setIsEditProfilePopupOpen] =\n        React.useState(false);\n    const [isAddPlacePopupOpen, setIsAddPlacePopupOpen] = React.useState(false);\n    const [isEditAvatarPopupOpen, setIsEditAvatarPopupOpen] =\n        React.useState(false);\n    const [selectedCard, setSelectedCard] = React.useState({});\n    const [isImagePopupOpen, setIsImagePopupOpen] = React.useState(false);\n    const [cards, setCards] = React.useState([]);\n    const [currentUser, setCurrentUser] = React.useState({});\n    const [isLoading, setIsLoading] = React.useState(false);\n    const [loggedIn, setLoggedIn] = React.useState(false);\n    const [userEmail, setUserEmail] = React.useState('');\n    const [infoTooltipPopupOpen, setInfoTooltipPopupOpen] =\n        React.useState(false);\n    const [isRegistrate, setIsRegistrate] = React.useState(false);\n    const buttonSubmitText = isLoading ? 'Сохранение...' : 'Сохранить';\n\n    const navigate = useNavigate();\n\n    function handleLogin(username, password) {\n        auth.authorization(username, password)\n            .then((res) => {\n                setIsRegistrate(false);\n                setUserEmail(username);\n                localStorage.setItem('jwt', res.token);\n                setLoggedIn(true);\n                navigate('/', { replace: true });\n            })\n            .catch((err) => {\n                console.log(err);\n                setIsRegistrate(false);\n                setLoggedIn(false);\n                setInfoTooltipPopupOpen(true);\n            });\n    }\n\n    function handleRegister(email, password) {\n        auth.registration(email, password)\n            .then(() => {\n                setIsRegistrate(true);\n                setInfoTooltipPopupOpen(true);\n                navigate('/signin', { replace: true });\n            })\n            .catch((err) => {\n                console.log(err);\n                setIsRegistrate(false);\n                setInfoTooltipPopupOpen(false);\n            });\n    }\n\n    function checkToken() {\n        if (localStorage.getItem('jwt')) {\n            const token = localStorage.getItem('jwt');\n            auth.getInformation(token)\n                .then((res) => {\n                    if (res && res.data) {\n                        setLoggedIn(true);\n                        setUserEmail(res.data.email);\n                        navigate('/', { replace: true });\n                    }\n                })\n                .catch(console.error);\n        } else {\n            setLoggedIn(false);\n        }\n    }\n\n    React.useEffect(() => {\n        checkToken();\n    }, []);\n\n    function handleLogOut() {\n        setLoggedIn(false);\n        localStorage.removeItem('jwt');\n        navigate('/signin');\n    }\n\n    React.useEffect(() => {\n        Promise.all([api.getUserInfo(), api.getInitialCards()])\n            .then(([user, card]) => {\n                setCurrentUser(user);\n                setCards(card);\n            })\n            .catch(console.error);\n    }, []);\n\n    function handleCardLike(card) {\n        const isLiked = card.likes.some((i) => i._id === currentUser._id);\n\n        api.changeLikeCardStatus(card._id, !isLiked)\n            .then((newCard) => {\n                setCards((state) =>\n                    state.map((c) => (c._id === card._id ? newCard : c))\n                );\n            })\n            .catch(console.error);\n    }\n\n    function handleCardDelete(card) {\n        api.deleteCard(card._id)\n            .then(() => {\n                const updatedCards = cards.slice().filter((c) => c !== card);\n                setCards(updatedCards);\n            })\n            .catch(console.error);\n    }\n\n    function handleUpdateUser(data) {\n        setIsLoading(true);\n        api.editProfile(data)\n            .then((res) => {\n                setCurrentUser(res);\n                closeAllPopups();\n            })\n            .catch(console.error)\n            .finally(() => {\n                setIsLoading(false);\n            });\n    }\n\n    function handleUpdateAvatar(url) {\n        api.changeAvatar(url)\n            .then((res) => {\n                setCurrentUser(res);\n                closeAllPopups();\n            })\n            .catch(console.error);\n    }\n\n    function handleAddPlaceSubmit(data) {\n        setIsLoading(true);\n        api.editCard(data)\n            .then((newCard) => {\n                setCards([newCard, ...cards]);\n                closeAllPopups();\n            })\n            .catch(console.error)\n            .finally(() => {\n                setIsLoading(false);\n            });\n    }\n\n    function handleCardClick(card) {\n        setSelectedCard(card);\n        setIsImagePopupOpen(true);\n    }\n\n    function handleEditAvatarClick() {\n        setIsEditAvatarPopupOpen(true);\n    }\n\n    function handleEditProfileClick() {\n        setIsEditProfilePopupOpen(true);\n    }\n\n    function handleAddPlaceClick() {\n        setIsAddPlacePopupOpen(true);\n    }\n\n    function closeAllPopups() {\n        setIsEditAvatarPopupOpen(false);\n        setIsEditProfilePopupOpen(false);\n        setIsAddPlacePopupOpen(false);\n        setIsImagePopupOpen(false);\n        setInfoTooltipPopupOpen(false);\n    }\n\n    return (\n        <CurrentUserContext.Provider value={currentUser}>\n            <div className='page'>\n                <Header\n                    loggedIn={loggedIn}\n                    handleLogOut={handleLogOut}\n                    email={userEmail}\n                />\n                <Routes>\n                    <Route\n                        path='/signin'\n                        element={<Login onLogin={handleLogin} />}\n                    />\n                    <Route\n                        path='/signup'\n                        element={<Register onRegister={handleRegister} />}\n                    />\n                    <Route\n                        path='/'\n                        element={\n                            <ProtectedRoute\n                                component={Main}\n                                loggedIn={loggedIn}\n                                cards={cards}\n                                onCardLike={handleCardLike}\n                                onCardDelete={handleCardDelete}\n                                onEditAvatar={handleEditAvatarClick}\n                                onEditProfile={handleEditProfileClick}\n                                onAddPlace={handleAddPlaceClick}\n                                onCardClick={handleCardClick}\n                            ></ProtectedRoute>\n                        }\n                    />\n                    <Route\n                        path='*'\n                        element={\n                            <ProtectedRoute\n                                component={Main}\n                                loggedIn={loggedIn}\n                                cards={cards}\n                                onCardLike={handleCardLike}\n                                onCardDelete={handleCardDelete}\n                                onEditAvatar={handleEditAvatarClick}\n                                onEditProfile={handleEditProfileClick}\n                                onAddPlace={handleAddPlaceClick}\n                                onCardClick={handleCardClick}\n                            ></ProtectedRoute>\n                        }\n                    />\n                </Routes>\n\n                <EditProfilePopup\n                    isOpen={isEditProfilePopupOpen}\n                    onClose={closeAllPopups}\n                    onUpdateUser={handleUpdateUser}\n                    buttonText={buttonSubmitText}\n                />\n                <EditAvatarPopup\n                    isOpen={isEditAvatarPopupOpen}\n                    onClose={closeAllPopups}\n                    onUpdateAvatar={handleUpdateAvatar}\n                />\n                <AddPlacePopup\n                    isOpen={isAddPlacePopupOpen}\n                    onClose={closeAllPopups}\n                    onAddPlace={handleAddPlaceSubmit}\n                    buttonText={buttonSubmitText}\n                />\n                <PopupWithForm\n                    title='Вы уверены?'\n                    name='delete-card'\n                    buttonText='Да'\n                    onClose={closeAllPopups}\n                />\n                <ImagePopup\n                    isOpen={isImagePopupOpen}\n                    card={selectedCard}\n                    onClose={closeAllPopups}\n                />\n\n                <InfoTooltip\n                    isOpen={infoTooltipPopupOpen}\n                    onClose={closeAllPopups}\n                    isRegistrate={isRegistrate}\n                    name='infotooltip'\n                />\n            </div>\n        </CurrentUserContext.Provider>\n    );\n}\n\nexport default App;\n","C:\\Users\\79282\\react-mesto-api-full-gha\\frontend\\src\\components\\ImagePopup.jsx",[],[],"C:\\Users\\79282\\react-mesto-api-full-gha\\frontend\\src\\components\\InfoTooltip.jsx",[],[],"C:\\Users\\79282\\react-mesto-api-full-gha\\frontend\\src\\components\\PopupWithForm.jsx",[],[],"C:\\Users\\79282\\react-mesto-api-full-gha\\frontend\\src\\components\\Header.jsx",[],[],"C:\\Users\\79282\\react-mesto-api-full-gha\\frontend\\src\\components\\ProtectedRoute.jsx",[],[],"C:\\Users\\79282\\react-mesto-api-full-gha\\frontend\\src\\components\\Main.jsx",[],[],"C:\\Users\\79282\\react-mesto-api-full-gha\\frontend\\src\\components\\Login.jsx",[],[],"C:\\Users\\79282\\react-mesto-api-full-gha\\frontend\\src\\components\\EditProfilePopup.jsx",[],[],"C:\\Users\\79282\\react-mesto-api-full-gha\\frontend\\src\\components\\Register.jsx",["101"],[],"import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nfunction Register(props) {\r\n    const { onRegister } = props;\r\n\r\n    const navigate = useNavigate();\r\n    const [email, setEmail] = React.useState('');\r\n    const [password, setPassword] = React.useState('');\r\n\r\n    function handleSubmitRegister(e) {\r\n        e.preventDefault();\r\n        onRegister(email, password);\r\n    }\r\n\r\n    return (\r\n        <div className='auth'>\r\n            <p className='auth__title'>Регистрация</p>\r\n            <form\r\n                onSubmit={handleSubmitRegister}\r\n                className='form form_type_auth'\r\n            >\r\n                <input\r\n                    type='email'\r\n                    className='form__input form__input_type_username'\r\n                    placeholder='Email'\r\n                    id='LoginEmail'\r\n                    minLength='2'\r\n                    required\r\n                    onChange={(e) => setEmail(e.target.value)}\r\n                    value={email}\r\n                    autoComplete='new-password'\r\n                />\r\n                <input\r\n                    type='password'\r\n                    className='form__input form__input_type_password'\r\n                    placeholder='Пароль'\r\n                    id='LoginPassword'\r\n                    minLength='2'\r\n                    required\r\n                    onChange={(e) => setPassword(e.target.value)}\r\n                    value={password}\r\n                    autoComplete='new-password'\r\n                />\r\n                <button\r\n                    type='submit'\r\n                    className='form__submit form__submit_type_auth'\r\n                >\r\n                    Зарегистрироваться\r\n                </button>\r\n                <div className=''>\r\n                    <Link to='/signin' className='form__link'>\r\n                        Уже зарегистрированы? Войти\r\n                    </Link>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Register;\r\n","C:\\Users\\79282\\react-mesto-api-full-gha\\frontend\\src\\components\\AddPlacePopup.jsx",[],[],"C:\\Users\\79282\\react-mesto-api-full-gha\\frontend\\src\\components\\EditAvatarPopup.jsx",[],[],"C:\\Users\\79282\\react-mesto-api-full-gha\\frontend\\src\\contexts\\CurrentUserContext.js",[],[],"C:\\Users\\79282\\react-mesto-api-full-gha\\frontend\\src\\utils\\api.js",["102"],[],"class Api {\r\n    constructor(options) {\r\n        this._url = options.url;\r\n        this._headers = options.headers;\r\n    }\r\n\r\n    getUserInfo() {\r\n        return fetch(`${this._url}/users/me`, {\r\n            method: 'GET',\r\n            headers: this._headers,\r\n        }).then(this._handleResponse);\r\n    }\r\n\r\n    getInitialCards() {\r\n        return fetch(`${this._url}/cards`, {\r\n            method: 'GET',\r\n            headers: this._headers,\r\n        }).then(this._handleResponse);\r\n    }\r\n\r\n    editProfile(data) {\r\n        return fetch(`${this._url}/users/me`, {\r\n            method: 'PATCH',\r\n            headers: this._headers,\r\n            body: JSON.stringify({\r\n                name: data.name,\r\n                about: data.about,\r\n            }),\r\n        }).then(this._handleResponse);\r\n    }\r\n\r\n    changeAvatar(url) {\r\n        return fetch(`${this._url}/users/me/avatar`, {\r\n            method: 'PATCH',\r\n            headers: this._headers,\r\n            body: JSON.stringify({\r\n                avatar: url,\r\n            }),\r\n        }).then(this._handleResponse);\r\n    }\r\n\r\n    getAppInfo() {\r\n        return Promise.all([this.getUserInfo(), this.getInitialCards()]);\r\n    }\r\n\r\n    editCard(data) {\r\n        return fetch(`${this._url}/cards`, {\r\n            method: 'POST',\r\n            headers: this._headers,\r\n            body: JSON.stringify({\r\n                name: data.name,\r\n                link: data.link,\r\n            }),\r\n        }).then(this._handleResponse);\r\n    }\r\n\r\n    deleteCard(cardId) {\r\n        return fetch(`${this._url}/cards/${cardId}`, {\r\n            method: 'DELETE',\r\n            headers: this._headers,\r\n        }).then(this._handleResponse);\r\n    }\r\n\r\n    like(cardId) {\r\n        return fetch(`${this._url}/cards/${cardId}/likes`, {\r\n            method: 'PUT',\r\n            headers: this._headers,\r\n        }).then(this._handleResponse);\r\n    }\r\n\r\n    removeLike(cardId) {\r\n        return fetch(`${this._url}/cards/${cardId}/likes`, {\r\n            method: 'DELETE',\r\n            headers: this._headers,\r\n        }).then(this._handleResponse);\r\n    }\r\n\r\n    changeAvatar(url) {\r\n        return fetch(`${this._url}/users/me/avatar`, {\r\n            method: 'PATCH',\r\n            headers: this._headers,\r\n            body: JSON.stringify({\r\n                avatar: url,\r\n            }),\r\n        }).then(this._handleResponse);\r\n    }\r\n\r\n    _handleResponse(res) {\r\n        if (res.ok) {\r\n            return res.json();\r\n        } else {\r\n            return Promise.reject(`Ошибка: ${res.status}`);\r\n        }\r\n    }\r\n\r\n    changeLikeCardStatus(cardId, isLiked) {\r\n        if (isLiked) {\r\n            return this.like(cardId);\r\n        } else {\r\n            return this.removeLike(cardId);\r\n        }\r\n    }\r\n}\r\n\r\nconst api = new Api({\r\n    url: 'https://api.krivolapov.nomoredomainsmonster.ru',\r\n    headers: {\r\n        authorization: `Bearer ${localStorage.getItem('jwt')}`,\r\n        'Content-type': 'application/json',\r\n    },\r\n});\r\n\r\nexport { api };\r\n","C:\\Users\\79282\\react-mesto-api-full-gha\\frontend\\src\\utils\\auth.js",[],[],"C:\\Users\\79282\\react-mesto-api-full-gha\\frontend\\src\\components\\Card.jsx",[],[],"C:\\Users\\79282\\react-mesto-api-full-gha\\frontend\\src\\components\\Footer.jsx",[],[],{"ruleId":"103","severity":1,"message":"104","line":88,"column":8,"nodeType":"105","endLine":88,"endColumn":10,"suggestions":"106"},{"ruleId":"107","severity":1,"message":"108","line":8,"column":11,"nodeType":"109","messageId":"110","endLine":8,"endColumn":19},{"ruleId":"111","severity":1,"message":"112","line":78,"column":5,"nodeType":"113","messageId":"114","endLine":86,"endColumn":6},"react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'checkToken'. Either include it or remove the dependency array.","ArrayExpression",["115"],"no-unused-vars","'navigate' is assigned a value but never used.","Identifier","unusedVar","no-dupe-class-members","Duplicate name 'changeAvatar'.","MethodDefinition","unexpected",{"desc":"116","fix":"117"},"Update the dependencies array to be: [checkToken]",{"range":"118","text":"119"},[3321,3323],"[checkToken]"]